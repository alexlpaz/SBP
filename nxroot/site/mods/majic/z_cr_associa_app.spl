////////////////////////////////////////////////////////////////////////
// Method:      
// Author:      Lucas Guimaraes
// Created:     
// Use Case:    Spec X.X - UC 1.1.1.1
// Modified by: 
// Modified:
//
// Description: Associa o fluxo de app no ticket
//
// Parameters:  
//              persid, category
//
////////////////////////////////////////////////////////////////////////
cr::z_cr_associa_app(...)
{
    
    
	int zi, zi_depurar;
	string zs_metodo;
	zs_metodo = 'z_cr_associa_app - ';

    // Alterar valor zi_depurar parar 1 para debug mode
    zi_depurar = 0;
        
    // Entrada para debug mode
    if ( zi_depurar==1 ) { 
        logf(SIGNIFICANT, "============================================================="); 
        logf(SIGNIFICANT, "%s Inicio - $s", zs_metodo, (string) now());
        logf(SIGNIFICANT, "%s User - '%s'", zs_metodo, thread_userid());
        logf(SIGNIFICANT, "%s ARG Count : %d", zs_metodo, argc);
        for (zi=0; zi<argc; zi+=1) {
            logf(SIGNIFICANT, "%s ARG #%s : %s", zs_metodo, (string) zi, (string) argv[zi]);          
        } ;
        logf(SIGNIFICANT, "============================================================="); 
    } ;      
    ///////////////////////////////////////////////////////////////////////////////////////
    // Inicio do codigo
    string zs_msg, zs_campo, zs_valor, zs_wc, zs_status, zs_persid, zs_pcat,zs_fluxo,zs_tipoapp,zs_pcatOLD,zs_aux,zs_approver,zs_regra;
    object zo_groupLeader, zo_cr, zo_lista, zo_item, zo_fluxo, zo_modpasso,zo_passo;
    int zi_lista, zi_index;
    uuid zu_approver;
    
    zs_persid = (string) argv[3];
    zs_pcatOLD = (string) argv[5];
    zs_pcat = (string) argv[6];
    
//parte 0: bloqueio para o que nao eh request. retirar/alterar quando entrar pra incidentes e/ou problemas
    zs_aux = (string) expand(format("&{%s = cr.persistent_id->type}", zs_persid ) );
    if(zs_aux != "R") return;
//

//parte 1:
    //buscando por passos para cancelar
    //Efetua uma busca dos objetos zpasso no banco de dados a partir da clausula definida em zs_wc
    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Buscando passos jah associados", zs_metodo ); } ;
    zs_wc = format("cr = '%s'",zs_persid );
    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Lista de zpasso: %s", zs_metodo,  zs_wc); } ;        
    send_wait( 0, top_object(), "call_attr", "zpasso", "sync_fetch",  "STATIC", zs_wc, -1, 0);
    if ( msg_error() ) {
        logf(ERROR, "%s Erro ao definir lista de zpasso's: %s", zs_metodo,  msg[0]);
        z_bloco_fim(zi_depurar, zs_metodo);
        return;
    } ;
    zo_lista = msg[0] ;
    zi_lista = (int) msg[1] ;   
    
    if(zi_lista > 0) {
        if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Cancelando passos asociados", zs_metodo ); } ;
    
        for ( zi_index = 0 ; zi_index < zi_lista; zi_index ++) { //Itera pelos items da zi_lista
            //Pega o zi_index item da lisat zo_lista
            send_wait( 0, zo_lista, "dob_by_index", "DEFAULT", zi_index, zi_index);
            if ( msg_error() ) {
                logf(ERROR, "%s Erro ao identificar Grupo: %s", zs_metodo,  msg[0]);
                z_bloco_fim(zi_depurar, zs_metodo);
                return;
            } ;
            zo_item = msg[0];
            //Cria um group leader
            if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Instanciando GL", zs_metodo ); } ;
            send_wait(0, top_object(), "get_co_group");
            if (msg_error()) {
                logf(ERROR, "%s Erro ao instanciar GL: '%s'", msg[0]);
                z_bloco_fim(zi_depurar, zs_metodo);
                return;
            }
            zo_groupLeader = msg[0];
            if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Group leader: '%s'", zs_metodo, (string) zo_groupLeader ); } ;    
            
            //Faz o checkout do objeto zo_objeto
            if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Lockando registro", zs_metodo ); } ;	
            send_wait(0, zo_groupLeader, "checkout", zo_item); 
            if ( msg_error() ) {
            	zs_msg = format("%s Outras pessoas estão editando o registro %s - Não foi possível travar para gravação o registro.", (string) zo_item, zs_metodo )  ;
            	set_error(1);
            	set_return_data(zs_msg);
                z_bloco_fim(zi_depurar, zs_metodo);                
                return;
            } ;
            
            //Define o valor zs_valor no campo zs_campo do objeto 
            zs_campo = "status";
            zs_valor = "CAN";
            if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Persistindo valor: '%s' no campo '%s'", zs_metodo, zs_valor, zs_campo ); } ;
            send_wait(0, zo_item, "call_attr", zs_campo, "set_val", zs_valor, "SURE_SET");
            if ( msg_error() ) {
                logf(ERROR, "%s ERRO ao persistir valor: %s", zs_metodo,  msg[0]);
                z_bloco_fim(zi_depurar, zs_metodo);
                return;
            } else {
                if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Valor persistido com sucesso", zs_metodo ); } ;
            } ;
            
            // Faz o checkin do objeto zo_cr
            if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Persistindo o objeto no banco", zs_metodo ); } ;	
            send_wait(0, zo_groupLeader, "checkin", zo_item); 
            if ( msg_error() ) {
                logf(ERROR, "%s Erro ao persistir valor: %s", zs_metodo, msg[0]);
                z_bloco_fim(zi_depurar, zs_metodo);
                return;
            } ;
            
             
            
            
        } ; //Fim do for que Itera pelos items da zi_lista
    
    
    }
    
    
    
//parte 2:
    //inserindo os passos novos
    //fluxo de app da pcat
    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Identificando fluxo", zs_metodo ); } ;
    
    zs_fluxo = (string) expand(format("&{%s = pcat.persistent_id->z_srl_fluxo}", zs_pcat ) );
    
    if(!is_empty(zs_fluxo)) {
        
        if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Buscando modelo de passos", zs_metodo ); } ;
    
        //Efetua uma busca dos objetos zfluxo no banco de dados a partir da clausula definida em zs_wc
        zs_wc = format("fluxo = %s and delete_flag=0",zs_fluxo );
        if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Lista de zfluxo: %s", zs_metodo,  zs_wc); } ;        
        send_wait( 0, top_object(), "call_attr", "zmodpasso", "sync_fetch",  "STATIC", zs_wc, -1, 0);
        if ( msg_error() ) {
            logf(ERROR, "%s Erro ao definir lista de zfluxo's: %s", zs_metodo,  msg[0]);
            z_bloco_fim(zi_depurar, zs_metodo);
            return;
        } ;
        zo_lista = msg[0] ;
        zi_lista = (int) msg[1] ;
        
        if(zi_lista > 0) {
            
            if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Inserindo modelos de passos como passos", zs_metodo ); } ;
        
            for ( zi_index = 0 ; zi_index < zi_lista; zi_index ++) { //Itera pelos items da zi_lista
            
                //Pega o zi_index item da lisat zo_lista
                send_wait( 0, zo_lista, "dob_by_index", "DEFAULT", zi_index, zi_index);
                if ( msg_error() ) {
                    logf(ERROR, "%s Erro ao identificar Grupo: %s", zs_metodo,  msg[0]);
                    z_bloco_fim(zi_depurar, zs_metodo);
                    return;
                } ;
                zo_modpasso = msg[0];
                
                if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Tentando identificar aprovador...", zs_metodo ); } ;
                
                zs_tipoapp = (string) zo_modpasso.tipoaprovador.sym;
                
                zu_approver = (uuid) "";
                if(zs_tipoapp == "Contato") zu_approver = zo_modpasso.cnt;
                else if(zs_tipoapp == "Contato de Objeto") zu_approver = (uuid) expand(format("&{%s = cr.persistent_id->%s}", zs_persid,(string) expand(format("&{%s = ntfl.id->object_attr}", zo_modpasso.ntfl ) ) ) );
                else if(zs_tipoapp == "Grupo") zu_approver = zo_modpasso.grp;
                else if(zs_tipoapp == "Organização") zu_approver =  zo_modpasso.org;
                else if(zs_tipoapp == "Regra") {
                    zs_regra = zo_modpasso.apprule;
                    
                }
                
 
                
                
                if(!is_empty(zu_approver)) {
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Aprovador identificado. Inserindo passo", zs_metodo ); } ;
                    //Cria um group leader
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Instanciando GL", zs_metodo ); } ;
                    send_wait(0, top_object(), "get_co_group");
                    if (msg_error()) {
                        logf(ERROR, "%s Erro ao instanciar GL: '%s'", msg[0]);
                        z_bloco_fim(zi_depurar, zs_metodo);
                        return;
                    }
                    zo_groupLeader = msg[0];            
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Group leader: '%s'", zs_metodo, (string) zo_groupLeader ); } ;    
                
                    //Cria novo dob "zpasso"
                    
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Submete get_new_dob", zs_metodo); } ;        
                    send_wait( 0, top_object(), "call_attr", "zpasso", "get_new_dob", "zpasso", zo_groupLeader, zo_groupLeader);
                    if (msg_error()) {
                        logf(ERROR, "%s Erro ao criar zpasso: '%s'", zs_metodo, msg[0]);
                        return;
                    }
                    zo_passo = msg[0];
                    
                    //Faz o checkout do objeto zo_objeto
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Lockando registro", zs_metodo ); } ;	
                    send_wait(0, zo_groupLeader, "checkout", zo_passo); 
                    if ( msg_error() ) {
                    	zs_msg = format("%s Outras pessoas estão editando o registro %s - Não foi possível travar para gravação o registro.", (string) zo_passo, zs_metodo )  ;
                    	set_error(1);
                    	set_return_data(zs_msg);
                        z_bloco_fim(zi_depurar, zs_metodo);                
                        return;
                    } ;  
                    
                   //Define o valor zs_valor no campo zs_campo do objeto 
                    zs_campo = (string) zo_modpasso.tipoaprovador.obj;
                    zs_valor = (string) zu_approver;
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Persistindo valor: '%s' no campo '%s'", zs_metodo, zs_valor, zs_campo ); } ;
                    send_wait(0, zo_passo, "call_attr", zs_campo, "set_val", zu_approver, "SURE_SET");
                    if ( msg_error() ) {
                        logf(ERROR, "%s ERRO ao persistir valor: %s", zs_metodo,  msg[0]);
                        z_bloco_fim(zi_depurar, zs_metodo);
                        return;
                    } else {
                        if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Valor persistido com sucesso", zs_metodo ); } ;
                    } ;  
                    
                    //Define o valor zs_valor no campo zs_campo do objeto 
                    zs_campo = "sequence";
                    zs_valor = (string) zo_modpasso.sequence;
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Persistindo valor: '%s' no campo '%s'", zs_metodo, zs_valor, zs_campo ); } ;
                    send_wait(0, zo_passo, "call_attr", zs_campo, "set_val", zo_modpasso.sequence, "SURE_SET");
                    if ( msg_error() ) {
                        logf(ERROR, "%s ERRO ao persistir valor: %s", zs_metodo,  msg[0]);
                        z_bloco_fim(zi_depurar, zs_metodo);
                        return;
                    } else {
                        if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Valor persistido com sucesso", zs_metodo ); } ;
                    } ;
                    
                    //Define o valor zs_valor no campo zs_campo do objeto 
                    zs_campo = "tipoaprovador";
                    zs_valor = (string) zo_modpasso.tipoaprovador;
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Persistindo valor: '%s' no campo '%s'", zs_metodo, zs_valor, zs_campo ); } ;
                    send_wait(0, zo_passo, "call_attr", zs_campo, "set_val", zo_modpasso.tipoaprovador, "SURE_SET");
                    if ( msg_error() ) {
                        logf(ERROR, "%s ERRO ao persistir valor: %s", zs_metodo,  msg[0]);
                        z_bloco_fim(zi_depurar, zs_metodo);
                        return;
                    } else {
                        if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Valor persistido com sucesso", zs_metodo ); } ;
                    } ;

                    //Define o valor zs_valor no campo zs_campo do objeto 
                    zs_campo = "grpstep";
                    zs_valor = (string) zo_modpasso.grpstep;
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Persistindo valor: '%s' no campo '%s'", zs_metodo, zs_valor, zs_campo ); } ;
                    send_wait(0, zo_passo, "call_attr", zs_campo, "set_val", zo_modpasso.grpstep, "SURE_SET");
                    if ( msg_error() ) {
                        logf(ERROR, "%s ERRO ao persistir valor: %s", zs_metodo,  msg[0]);
                        z_bloco_fim(zi_depurar, zs_metodo);
                        return;
                    } else {
                        if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Valor persistido com sucesso", zs_metodo ); } ;
                    } ;
                    
                    //Define o valor zs_valor no campo zs_campo do objeto 
                    zs_campo = "status";
                    zs_valor = "AWP";
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Persistindo valor: '%s' no campo '%s'", zs_metodo, zs_valor, zs_campo ); } ;
                    send_wait(0, zo_passo, "call_attr", zs_campo, "set_val", zs_valor, "SURE_SET");
                    if ( msg_error() ) {
                        logf(ERROR, "%s ERRO ao persistir valor: %s", zs_metodo,  msg[0]);
                        z_bloco_fim(zi_depurar, zs_metodo);
                        return;
                    } else {
                        if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Valor persistido com sucesso", zs_metodo ); } ;
                    } ;  
                    
                    //Define o valor zs_valor no campo zs_campo do objeto 
                    zs_campo = "cr";
                    zs_valor = zs_persid;
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Persistindo valor: '%s' no campo '%s'", zs_metodo, zs_valor, zs_campo ); } ;
                    send_wait(0, zo_passo, "call_attr", zs_campo, "set_val", zs_valor, "SURE_SET");
                    if ( msg_error() ) {
                        logf(ERROR, "%s ERRO ao persistir valor: %s", zs_metodo,  msg[0]);
                        z_bloco_fim(zi_depurar, zs_metodo);
                        return;
                    } else {
                        if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Valor persistido com sucesso", zs_metodo ); } ;
                    } ;              
                    

                    // Faz o checkin do objeto zo_cr
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Persistindo o objeto no banco", zs_metodo ); } ;	
                    send_wait(0, zo_groupLeader, "checkin", zo_passo); 
                    if ( msg_error() ) {
                        logf(ERROR, "%s Erro ao persistir valor: %s", zs_metodo, msg[0]);
                        z_bloco_fim(zi_depurar, zs_metodo);
                        return;
                    } ;   
                
                
                }
                else {
                    if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Nao foi possivel identificar um aprovador. Saindo deste passo...", zs_metodo ); } ;
                }           
          
            } ; //Fim do for que Itera pelos items da zi_lista

        }
        else {
            if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Fluxo sem passos... saindo", zs_metodo ); } ;
        }
    } 
    else {
        if ( zi_depurar==1 ) { logf(SIGNIFICANT, "%s Category sem fluxo. Saindo...", zs_metodo ); } ;
    }
            

    // Fim do codigo
    ///////////////////////////////////////////////////////////////////////////////////////
	z_bloco_fim(zi_depurar, zs_metodo);

} ;